dim(pheno)
table(phenoGeno$strain)
dim(pGbyR)
dim(pGbyRsub)
head(names(testSnps))
table(pooled)
plot(factor(testSnps$strain), testSnps$BMD_femur)
getwd()
install.packages("c:/Users/Chris/Documents/University of Waterloo/Research/Core/Code/genetic-model/toyGenomeGenR", repos = NULL, type = "source")
midChr(jax_bsb$chromosome)
cumsum(table(jax_bsb$chromosome))
jax_bsb
jax_bsb
> 
popCorrelation(jax_bsbChr)
popCorrelation(jax_bsb)
selectGenome(jax_bsb)
selectGenome(jax_bsb,2)
selectGenome(jax_bsb,91)
selectGenome(jax_bsb,94)
selectGenome(jax_bsb,93)
selectGenome(jax_bsb,92)
selectGenome(jax_bsb,90)
sapply(jax_bsb$encodings, function(mat) any(is.na(mat)))
sapply(jax_bsb$encodings, scoreAdditive)
breaks
jax_t1
str(jax_scores)
str(jax_scores)
jax_t1
plot(density(jax_mg))
plot(density(jax_pg))
plot(density(jax_mg))
jax_scores[1,]
plot(density(jax_mg))\
plot(density(jax_mg))
plot(density(jax_mg))
plot(density(jax_mg))
plot(density(jax_pg))
plot(density(jax_mg))
plot(density(jax_pg))
plot(density(jax_mg))
plot(density(jax_pg))
plot(density(jax_mg))
plot(density(jax_pg))
plot(density(jax_mg))
plot(density(jax_pg))
plot(density(jax_mg))
plot(density(jax_pg))
plot(density(jax_mg))
plot(density(jax_pg))
str(jax_scores)
jax_mgP
jax_pgP
hist(jax_mgP)
hist(jax_pgP)
sample(1:10)
str(jax_mgNull)
rm(pchisq)
dim(jax_score)
dim(jax_scores)
null
ps
jj
trait
str(jax_scores)
nullpl
hist(pmat)
hist(nullpmat)
hist(nullpmat[1,,])
hist(nullpmat[2,,])
hist(nullpmat[3,,])
hist(pmat[1,,])
hist(pmat[2,,])
hist(pmat)
hist(nullpmat)
warnings()
hist(nullpmat[1,,])
hist(pmat[1,,])
hist(pmat[2,,])
hist(pmat[3,,])
hist(pmat[4,,])
hist(pmat[5,,])
warnings()
apply(permPs, c(1,3), poolChi, kap = 1)
permPs
apply(permPs, c(1,3), poolChi, kap = 1)
hist(apply(permPs, c(1,3), poolChi, kap = 1))
hist(apply(permPs[1,,], 2, poolChi, kap = 1))
obsPs
poolChi(obsPs[1,], kap = 1)
hist(log(apply(permPs[1,,], 2, poolChi, kap = 1)))
hist(log(apply(permPs[5,,], 2, poolChi, kap = 1)))
hist(log(apply(permPs[1,,], 2, poolChi, kap = 0.1)))
poolChi(obsPs[1,], kap = 0.1)
hist(apply(permPs[1,,], 2, function(x) sum(qchisq(x, df = 2, lower.tail = FALSE))))
sum(qchisq(obsPs[1,], df = 2, lower.tail = FALSE))
ns
nrow(jax_scores)
plot(pmat[1,,])
pmat[1,,]
plot(pmat[1,,])
plot(log(pmat[1,,]))
plot(log(c(pmat[1,,])))
plot(x = 1:20, y = log(c(pmat[1,,]))))
plot(x = 1:20, y = log(c(pmat[1,,])))
plot(x = rep(1:20, nsim), y = log(c(pmat[1,,])))
plot(x = rep(1:20, nsim), y = log(c(pmat[2,,])))
plot(x = rep(1:20, nsim), y = log(c(pmat[3,,])))
plot(x = rep(1:20, nsim), y = log(c(pmat[4,,])))
plot(x = rep(1:20, nsim), y = log(c(pmat[5,,])))
str(pmat)
jax_bsbSingle
jax_bsbSingle$location
as.numeric(factor(c(1.1,2.3,203.4)))
unclass(factor(c(1.1,2.3,203.4)))
?boxplot
jax_bsbBlock
jax_bsbBlock$location
head(chiCordf)
str(chiCordf)
chiCorMods
str(chiCordf)
str(chiCordf$zcor)
str(chiCorMods)
str(chiCorMods[[1]])
summary(chiCorMods[[1]])
summary(chiCorMods[[81]])
summary(chiCorMods[[161]])
str(summary(chiCorMods[[161]]))
str(chiCordf)
table(chiCordf$logkap)
str(exDat)
chiCorMods[[88]]
kseq[[88]]
log(exp(-8), 10)
0.3^2
corrImg
image
?image
?options
?par
randomsplit
length(trait)
curves
ps
jj
jj <- 1
trait
ps
ps
plot(ps)
plot(null)
jj
pools
hist(ps)
hist(pmat[1,,])
hist(pmat[2,,])
hist(pmat[3,,])
hist(pmat[4,,])
hist(pmat[5,,])
hist(ps)
hist(pmat[5,,1])
hist(pmat[5,,2])
hist(pmat[5,,3])
hist(pmat[5,,4])
hist(pmat[5,,5])
hist(pmat[5,,6])
hist(pmat[5,,7])
poolChi(pmat[5,,7], 100)
poolChi(pmat[5,,7], 0.01)
str(minQuants)
str(mat)
kseq
jaxscores
jaxScores
jax_scores
sample(1:20)
test <- sample(1:20)
testg <- sample(rep(1:2, 10))
testg
test
sapply(1:19, chiScore, x = test, g = testg, n = 20)
unimaxsplit(test, testg, 20)
seq_len(-5)
test <- sample(1:90)
testg <- sample(rep(1:2, 45))
unimaxsplit(test, testg, 90)
?seq_len
unimaxsplit(test, testg, 90)
unimaxsplit(test, testg, 90)
unimaxsplit(test, testg, 90)
test <- sample(1:90)
testg <- sample(rep(1:2, 45))
unimaxsplit(test, testg, 90)
unimaxsplit(test, testg, 90)
unimaxsplit(test, testg, 90)
min
which.max
testg
test[testg == 1]
splitCol(test[testg == 1])
splitCol(test[testg == 1], 90)
debugonce(splitCol)
debugonce(splitCol(test[testg == 1], 90))
dif
f
splitCol(test[testg == 1], 90)
test[testg == 1]
sort(test[testg == 1])
debugonce(splitCol)
debugonce(splitColtest[testg == 1], 90)
debugonce(splitCol(test[testg == 1], 90))
nx
xs
dif
ind1
f
splitCol(test[testg == 1], 90)
sum(testg == 1)
debugonce(splitCol)
debugonce(splitCol(test[testg == 1], 90))
nx
xs
dif
ind1
ind2
xs[29]
xs[1:29]
xs[1:230]
xs[1:29]
xs[1:30]
ind1
ind1+ind2
dif
xs[40]
splitCol(test[testg == 1], 90)
debugonce(splitCol)
debugonce(splitCol(test[testg == 1], 90))
ind1
xs[1:11]
xs[1:12]
splt1
ind2
ind1
ind1 + ind2
nx
xs[1:40]
xs[1:41]
xs[ind1:(ind1+ind2)]
length(x)
xs[1:ind1]
splt2
n-splt2
nx
xs[(ind1+ind2):nx]
nx - ind2
nx - ind2 - ind1
xs
nx - ind2 - ind1
splitCol <- function(x, n, lim = 10) {
    nx <- length(x) # size of margin
    xs <- c(0, sort(x), n+1) # sorted order, add limits
    dif <- diff(xs) # size of gaps indicate maximum
    ind1 <- which.max(dif) # index of first split
    splt1 <- max(c(min(c(xs[ind1], n - lim)), lim))
    if (splt1 >= n - 2*lim) { # can only split below
        ind2 <- which.max(dif[1:(ind1-1)])
        splt2 <- max(c(xs[ind2], lim))
        return(list(ex = c(splt2, splt1-splt2, n-splt1)/n,
                    obs = c(ind2-1, ind1-ind2, nx-ind1+1)))
    } else if (splt1 <= 2*lim) { # can only split above
        ind2 <- which.max(dif[(ind1+1):(nx+1)])
        splt2 <- min(c(xs[ind1+ind2], n-lim))
        return(list(ex = c(splt1, splt2-splt1, n-splt2)/n,
                    obs = c(ind1-1, ind2, nx-ind2-ind1+1)))
    } else {
        ind2 <- which.max(dif[(ind1+1):(nx+1)])
        splt2 <- min(c(xs[ind1+ind2], n-lim))
        ind3 <- which.max(dif[1:(ind1-1)])
        splt3 <- max(c(xs[ind3], lim))
        return(list(ex = c(splt3, splt1-splt3, splt2-splt1,
                           n-splt2)/n,
                    obs = c(ind3-1, ind1-ind3, ind2, nx-ind2-ind1+1)))
    }
f}
f
splitCol(test[testg == 1], 90)
splitCol(test[testg == 2], 90)
unimaxsplit(test, testg, 90)
unimaxsplit(test, testg, 90)
unimaxsplit(test, testg, 90)
mat
 str(curves)
str(ps)
str(pMat)
str(pmat)
str(pmat[1,,])
str(pmat[1,,1])
 pmat[1,,1]
 pmat[2,,1]
 pmat[5,,1]
 pmat[1,,1]
 pmat[1,,2]
 pmat[1,,3]
 pmat[1,,4]
jj <- 1
trait
str(jax_scores)
unimaxsplit(rank(trait), jax_scores[1,], n = 94)
unimaxsplit(rank(trait), jax_scores[1,], n = 94)
unimaxsplit(rank(trait), jax_scores[1,], n = 94)
unimaxsplit(rank(trait), jax_scores[2,], n = 94)
unimaxsplit(rank(trait), jax_scores[3,], n = 94)
unimaxsplit(rank(trait), jax_scores[4,], n = 94)
unimaxsplit(rank(trait), jax_scores[5,], n = 94)
debugonce(unimaxsplit)
debugonce(unimaxsplit(rank(trait), jax_scores[5,], n = 94))
g1
debugonce(splitCol)
debugonce(splitCol(x[g==1], n = n, lim = lim))
nx
nx
xs
rle(g)
ind1
ind1
nx
f
f
unimaxsplit(rank(trait), jax_scores[5,], n = 94)
unimaxsplit(rank(trait), jax_scores[5,], n = 94)
mat
str(mat)
debugonce(addQuantPoly)
debugonce(addQuantPoly(log(mat[ind,,], 10))
)
kseq
f
debugonce(addQuantPoly)
debugonce(addQuantPoly(log(mat[ind,,], 10), kseq = kseq, cex = 0.6,
             labpos = c("left", "bottom")))
kseq
qn
qn
f
addQuantPoly <- function(mat, qnts = c(0.005, 0.025, 0.25),
                         kseq = exp(seq(-8, 8, by = 0.25)),
                         labpos = c("left", "top"), ...) {
    for (qn in qnts) {
        polygon(log(c(kseq, rev(kseq)), base = 10),
                c(apply(mat, 1, quantile,
                        probs = qnts),
                  rev(apply(mat, 1, quantile,
                            probs = 1-qnts))),
                col = adjustcolor("gray", 0.25), border = NA)
        if (labpos[1] == "left") {
            xind <- 1
            adj <- c(0, 0.5)
        } else if (labpos[1] == "right") {
            xind <- length(kseq)
            adj <- c(1, 0.5)
        }
        if (labpos[2] == "top") {
            yq <- 1-qn
        } else if (labpos[2] == "bottom") {
            yq <- qn
        }
        text(x = log(kseq[xind], 10),
             y = quantile(mat[xind,], yq),
             labels = 1-2*qn, adj = adj, ...)
    }
    lines(x = log(kseq, 10),
          y = apply(mat, 1, median))
qn}
qn
debugonce(addQuantPoly)
debugonce(addQuantPoly(log(mat[ind,,], 10), kseq = kseq, cex = 0.6,
             labpos = c("left", "bottom")))
qnts
dim(mat)
apply(mat, 1, quantile, probs = qnts)
q
mat[ind,,]
q
f
mat[ind,,]
str(mat)
sum(log(mat[ind, 161, ], 10) <= log(nullQuants["5%", "100"], 10))
rm(list = ls())
str(snpCols)
str(phenoGeno)
str(testSnps)
table(testSnps$coat)
str(nullQuants)
which.min(pooled)
kseq(which.min(pooled))
kseq[which.min(pooled)]
plot(pvals)
plot(log(pvals,10))
str(testSnps)
str(phenoGeno)
str(snps)
snps$chr[colnames(testSnps)[snpCols]]
snps[, "chr"][colnames(testSnps)[snpCols]]
str(pvals)
 plot(snps[, "chr"][colnames(testSnps)[snpCols]], pvals)
 plot(snps[, "chr"][colnames(testSnps)[snpCols]], log(pvals, 10))
tapply(log(pvals, 10), snps[, "chr"][colnames(testSnps)[snpCols]], mean)
names(chiCorMods)
> 
test <- cov(jax_scores)
str(test)
length(chiCorMods)
testSig <- convertRho(test, 81)
image(test)
image(testSig)
str(testSig)
testSig <- convertRho(test, 81)
str(test)
94^2
testSig <- convertRho(test, 81)
str(testSig)
image(testSig)
image(test)
diag(testSig)
diag(test)
kseq
      sapply(chiCorMods, function(mod) summary(mod)$r.squared)
sapply(chiCorMods, function(mod) summary(mod)$r.squared) > 0.98
sapply(chiCorMods, function(mod) summary(mod)$r.squared) > 0.99
kseq[sapply(chiCorMods, function(mod) summary(mod)$r.squared) > 0.99]
log(kseq[sapply(chiCorMods, function(mod) summary(mod)$r.squared) > 0.99], 10)
kseq
dim(testSnps)
str(tests)
str(pvals)
str(snps)
str(testSnps)
head(names(testSnps)
)
corrImg(obsCorrs)
corrImg(obscorrs)
str(obscorrs)
str(obscorrs)
corrImg(obscorrs)
str(snps)
str(cmdists)
str(cmdists)
theoryCorrelation
str(chrs)
debugonce(theoryCorrelation)
debugonce(thcorrs <- theoryCorrelation(list(location = locs, chromosome = chrs)))
str(chrinds)
chrinds
head(chrs)
head(chrs, 20)
rle(chrs)
str(pr)
d
f
corrImg(thcorrs)
locs[[1]]
head(names(snps))
head(colnames(snps))
head(snps[, c("chr", "cMs")])
head(snps[, c("chr", "cMs")])
head(snps[, c("chr", "cMs")], 30)
rle(snps[, "chr"])
corrImg(thcorrs)
locs[[1]]
str(testSnps)
head(snpOrder)
head(names(testSnps)[snpCols])
locs[[1]]
corrImg(thcorrs)
str(pooledadj)
head(names(phenogeno)
)
head(names(testSnps))
head(names(testSnps), 10)
nrow(testSnps)
1112/43
dim(testSnps)
names(pGbyR)[1:5]
str(pGbyR$sex)
table(str(pGbyR$sex))
table(pGbyR$sex)
(dim(testSnps)
)
image(obscorrs)
10^(-0.75)
1052/20
plot(sort(qchisq(pvals, 0.18, lower.tail = FALSE)))
plot(sort(qchisq(pvals, 0.18, lower.tail = FALSE), decreasing = TRUE))
head(pvalOrd)
1052/20
top53
names(pvals)
top53
