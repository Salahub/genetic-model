## READ/PROCESS MGI DATA #############################################

##' another source of experimental data is the MGI website, which has
##' a number of "panels" of mice generated in experimental work and
##' then measured, typically the crosses used are backcrosses
##' the functionality to extract all of this and the reference website
##' are in the simulationFunctions file, we start by loading the MGI
##' provided database of markers (which is rather large)
mgiMarkers <- readMGIlists() # descriptions of all markers

##' next we can consider the panels, first read the data
mgiPanels <- lapply(paste0(mgiUrl, mgiPNames), readMGIrpt)
names(mgiPanels) <- names(mgiPNames)
##' match the marker names back to the marker reference
mgiPanels.mrkr <- lapply(mgiPanels,
                         function(panel) {
                             match(names(panel$data),
                                   mgiMarkers$`Marker Symbol`)
                         })
##' get cM positions
mgiPanels.cMs <- lapply(mgiPanels.mrkr, processcMs,
                        tab = mgiMarkers$`cM Position`)
##' Infs indicate markers localized to a chromosome but without a
##' known cM position, while NAs indicate markers missing from the
##' reference file or marked as unknown there

##' filter the panels by those markers with known positions
mgiFiltered <- mapply(filterPanelBycM, mgiPanels, mgiPanels.cMs,
                      SIMPLIFY = FALSE)

##' identify the type of cross of each using the summaries
mgiPanel.cross <- c("backcross", "backcross", "backcross",
                    "backcross", "backcross", "backcross",
                    "backcross", "unclear", "backcross",
                    "backcross", "intercross", "unclear",
                    "backcross", "backcross")
names(mgiPanel.cross) <- names(mgiFiltered)

##' convert to genome objects
mgiSelect <- names(mgiFiltered)[which(mgiPanel.cross == "backcross")]
mgiGenomes <- vector(mode = "list", length = length(mgiSelect))
names(mgiGenomes) <- mgiSelect # set names
for (nm in mgiSelect) {
    cat("\r - Panel : ", nm)
    mgiGenomes[nm] <- list(mgiToGenome(mgiFiltered[[nm]],
                                       mgiPanel.cross[nm]))
}
##' convert to populations for ease of storage
mgiPanelPops <- lapply(mgiGenomes, asPopulation)
##' save these as RData files
for (nm in names(mgiPanelPops)) {
    assign(nm, mgiPanelPops[nm])
    save(nm, file = paste0(nm, ".RData"))
}

## remove unnecessary data
rm(list = c("mgiMarkers", "mgiPanels.cMs", "mgiPanels.mrkr",
            "mgiPanels"))
